/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TokenIconImport } from './routes/TokenIcon'
import { Route as ThemeSwitchImport } from './routes/ThemeSwitch'
import { Route as SpinnerImport } from './routes/Spinner'
import { Route as SpacerImport } from './routes/Spacer'
import { Route as ShowAfterImport } from './routes/ShowAfter'
import { Route as SeparatorImport } from './routes/Separator'
import { Route as ScreenImport } from './routes/Screen'
import { Route as PresetsInputImport } from './routes/PresetsInput'
import { Route as InputImport } from './routes/Input'
import { Route as FrameImport } from './routes/Frame'
import { Route as DiscIconImport } from './routes/DiscIcon'
import { Route as DetailsImport } from './routes/Details'
import { Route as DepositImport } from './routes/Deposit'
import { Route as CopyButtonImport } from './routes/CopyButton'
import { Route as ColorsImport } from './routes/Colors'
import { Route as ChainsPathImport } from './routes/ChainsPath'
import { Route as ChainIconImport } from './routes/ChainIcon'
import { Route as ButtonAreaImport } from './routes/ButtonArea'
import { Route as ButtonImport } from './routes/Button'
import { Route as BalanceImport } from './routes/Balance'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const TokenIconRoute = TokenIconImport.update({
  id: '/TokenIcon',
  path: '/TokenIcon',
  getParentRoute: () => rootRoute,
} as any)

const ThemeSwitchRoute = ThemeSwitchImport.update({
  id: '/ThemeSwitch',
  path: '/ThemeSwitch',
  getParentRoute: () => rootRoute,
} as any)

const SpinnerRoute = SpinnerImport.update({
  id: '/Spinner',
  path: '/Spinner',
  getParentRoute: () => rootRoute,
} as any)

const SpacerRoute = SpacerImport.update({
  id: '/Spacer',
  path: '/Spacer',
  getParentRoute: () => rootRoute,
} as any)

const ShowAfterRoute = ShowAfterImport.update({
  id: '/ShowAfter',
  path: '/ShowAfter',
  getParentRoute: () => rootRoute,
} as any)

const SeparatorRoute = SeparatorImport.update({
  id: '/Separator',
  path: '/Separator',
  getParentRoute: () => rootRoute,
} as any)

const ScreenRoute = ScreenImport.update({
  id: '/Screen',
  path: '/Screen',
  getParentRoute: () => rootRoute,
} as any)

const PresetsInputRoute = PresetsInputImport.update({
  id: '/PresetsInput',
  path: '/PresetsInput',
  getParentRoute: () => rootRoute,
} as any)

const InputRoute = InputImport.update({
  id: '/Input',
  path: '/Input',
  getParentRoute: () => rootRoute,
} as any)

const FrameRoute = FrameImport.update({
  id: '/Frame',
  path: '/Frame',
  getParentRoute: () => rootRoute,
} as any)

const DiscIconRoute = DiscIconImport.update({
  id: '/DiscIcon',
  path: '/DiscIcon',
  getParentRoute: () => rootRoute,
} as any)

const DetailsRoute = DetailsImport.update({
  id: '/Details',
  path: '/Details',
  getParentRoute: () => rootRoute,
} as any)

const DepositRoute = DepositImport.update({
  id: '/Deposit',
  path: '/Deposit',
  getParentRoute: () => rootRoute,
} as any)

const CopyButtonRoute = CopyButtonImport.update({
  id: '/CopyButton',
  path: '/CopyButton',
  getParentRoute: () => rootRoute,
} as any)

const ColorsRoute = ColorsImport.update({
  id: '/Colors',
  path: '/Colors',
  getParentRoute: () => rootRoute,
} as any)

const ChainsPathRoute = ChainsPathImport.update({
  id: '/ChainsPath',
  path: '/ChainsPath',
  getParentRoute: () => rootRoute,
} as any)

const ChainIconRoute = ChainIconImport.update({
  id: '/ChainIcon',
  path: '/ChainIcon',
  getParentRoute: () => rootRoute,
} as any)

const ButtonAreaRoute = ButtonAreaImport.update({
  id: '/ButtonArea',
  path: '/ButtonArea',
  getParentRoute: () => rootRoute,
} as any)

const ButtonRoute = ButtonImport.update({
  id: '/Button',
  path: '/Button',
  getParentRoute: () => rootRoute,
} as any)

const BalanceRoute = BalanceImport.update({
  id: '/Balance',
  path: '/Balance',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/Balance': {
      id: '/Balance'
      path: '/Balance'
      fullPath: '/Balance'
      preLoaderRoute: typeof BalanceImport
      parentRoute: typeof rootRoute
    }
    '/Button': {
      id: '/Button'
      path: '/Button'
      fullPath: '/Button'
      preLoaderRoute: typeof ButtonImport
      parentRoute: typeof rootRoute
    }
    '/ButtonArea': {
      id: '/ButtonArea'
      path: '/ButtonArea'
      fullPath: '/ButtonArea'
      preLoaderRoute: typeof ButtonAreaImport
      parentRoute: typeof rootRoute
    }
    '/ChainIcon': {
      id: '/ChainIcon'
      path: '/ChainIcon'
      fullPath: '/ChainIcon'
      preLoaderRoute: typeof ChainIconImport
      parentRoute: typeof rootRoute
    }
    '/ChainsPath': {
      id: '/ChainsPath'
      path: '/ChainsPath'
      fullPath: '/ChainsPath'
      preLoaderRoute: typeof ChainsPathImport
      parentRoute: typeof rootRoute
    }
    '/Colors': {
      id: '/Colors'
      path: '/Colors'
      fullPath: '/Colors'
      preLoaderRoute: typeof ColorsImport
      parentRoute: typeof rootRoute
    }
    '/CopyButton': {
      id: '/CopyButton'
      path: '/CopyButton'
      fullPath: '/CopyButton'
      preLoaderRoute: typeof CopyButtonImport
      parentRoute: typeof rootRoute
    }
    '/Deposit': {
      id: '/Deposit'
      path: '/Deposit'
      fullPath: '/Deposit'
      preLoaderRoute: typeof DepositImport
      parentRoute: typeof rootRoute
    }
    '/Details': {
      id: '/Details'
      path: '/Details'
      fullPath: '/Details'
      preLoaderRoute: typeof DetailsImport
      parentRoute: typeof rootRoute
    }
    '/DiscIcon': {
      id: '/DiscIcon'
      path: '/DiscIcon'
      fullPath: '/DiscIcon'
      preLoaderRoute: typeof DiscIconImport
      parentRoute: typeof rootRoute
    }
    '/Frame': {
      id: '/Frame'
      path: '/Frame'
      fullPath: '/Frame'
      preLoaderRoute: typeof FrameImport
      parentRoute: typeof rootRoute
    }
    '/Input': {
      id: '/Input'
      path: '/Input'
      fullPath: '/Input'
      preLoaderRoute: typeof InputImport
      parentRoute: typeof rootRoute
    }
    '/PresetsInput': {
      id: '/PresetsInput'
      path: '/PresetsInput'
      fullPath: '/PresetsInput'
      preLoaderRoute: typeof PresetsInputImport
      parentRoute: typeof rootRoute
    }
    '/Screen': {
      id: '/Screen'
      path: '/Screen'
      fullPath: '/Screen'
      preLoaderRoute: typeof ScreenImport
      parentRoute: typeof rootRoute
    }
    '/Separator': {
      id: '/Separator'
      path: '/Separator'
      fullPath: '/Separator'
      preLoaderRoute: typeof SeparatorImport
      parentRoute: typeof rootRoute
    }
    '/ShowAfter': {
      id: '/ShowAfter'
      path: '/ShowAfter'
      fullPath: '/ShowAfter'
      preLoaderRoute: typeof ShowAfterImport
      parentRoute: typeof rootRoute
    }
    '/Spacer': {
      id: '/Spacer'
      path: '/Spacer'
      fullPath: '/Spacer'
      preLoaderRoute: typeof SpacerImport
      parentRoute: typeof rootRoute
    }
    '/Spinner': {
      id: '/Spinner'
      path: '/Spinner'
      fullPath: '/Spinner'
      preLoaderRoute: typeof SpinnerImport
      parentRoute: typeof rootRoute
    }
    '/ThemeSwitch': {
      id: '/ThemeSwitch'
      path: '/ThemeSwitch'
      fullPath: '/ThemeSwitch'
      preLoaderRoute: typeof ThemeSwitchImport
      parentRoute: typeof rootRoute
    }
    '/TokenIcon': {
      id: '/TokenIcon'
      path: '/TokenIcon'
      fullPath: '/TokenIcon'
      preLoaderRoute: typeof TokenIconImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Balance': typeof BalanceRoute
  '/Button': typeof ButtonRoute
  '/ButtonArea': typeof ButtonAreaRoute
  '/ChainIcon': typeof ChainIconRoute
  '/ChainsPath': typeof ChainsPathRoute
  '/Colors': typeof ColorsRoute
  '/CopyButton': typeof CopyButtonRoute
  '/Deposit': typeof DepositRoute
  '/Details': typeof DetailsRoute
  '/DiscIcon': typeof DiscIconRoute
  '/Frame': typeof FrameRoute
  '/Input': typeof InputRoute
  '/PresetsInput': typeof PresetsInputRoute
  '/Screen': typeof ScreenRoute
  '/Separator': typeof SeparatorRoute
  '/ShowAfter': typeof ShowAfterRoute
  '/Spacer': typeof SpacerRoute
  '/Spinner': typeof SpinnerRoute
  '/ThemeSwitch': typeof ThemeSwitchRoute
  '/TokenIcon': typeof TokenIconRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Balance': typeof BalanceRoute
  '/Button': typeof ButtonRoute
  '/ButtonArea': typeof ButtonAreaRoute
  '/ChainIcon': typeof ChainIconRoute
  '/ChainsPath': typeof ChainsPathRoute
  '/Colors': typeof ColorsRoute
  '/CopyButton': typeof CopyButtonRoute
  '/Deposit': typeof DepositRoute
  '/Details': typeof DetailsRoute
  '/DiscIcon': typeof DiscIconRoute
  '/Frame': typeof FrameRoute
  '/Input': typeof InputRoute
  '/PresetsInput': typeof PresetsInputRoute
  '/Screen': typeof ScreenRoute
  '/Separator': typeof SeparatorRoute
  '/ShowAfter': typeof ShowAfterRoute
  '/Spacer': typeof SpacerRoute
  '/Spinner': typeof SpinnerRoute
  '/ThemeSwitch': typeof ThemeSwitchRoute
  '/TokenIcon': typeof TokenIconRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/Balance': typeof BalanceRoute
  '/Button': typeof ButtonRoute
  '/ButtonArea': typeof ButtonAreaRoute
  '/ChainIcon': typeof ChainIconRoute
  '/ChainsPath': typeof ChainsPathRoute
  '/Colors': typeof ColorsRoute
  '/CopyButton': typeof CopyButtonRoute
  '/Deposit': typeof DepositRoute
  '/Details': typeof DetailsRoute
  '/DiscIcon': typeof DiscIconRoute
  '/Frame': typeof FrameRoute
  '/Input': typeof InputRoute
  '/PresetsInput': typeof PresetsInputRoute
  '/Screen': typeof ScreenRoute
  '/Separator': typeof SeparatorRoute
  '/ShowAfter': typeof ShowAfterRoute
  '/Spacer': typeof SpacerRoute
  '/Spinner': typeof SpinnerRoute
  '/ThemeSwitch': typeof ThemeSwitchRoute
  '/TokenIcon': typeof TokenIconRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/Balance'
    | '/Button'
    | '/ButtonArea'
    | '/ChainIcon'
    | '/ChainsPath'
    | '/Colors'
    | '/CopyButton'
    | '/Deposit'
    | '/Details'
    | '/DiscIcon'
    | '/Frame'
    | '/Input'
    | '/PresetsInput'
    | '/Screen'
    | '/Separator'
    | '/ShowAfter'
    | '/Spacer'
    | '/Spinner'
    | '/ThemeSwitch'
    | '/TokenIcon'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/Balance'
    | '/Button'
    | '/ButtonArea'
    | '/ChainIcon'
    | '/ChainsPath'
    | '/Colors'
    | '/CopyButton'
    | '/Deposit'
    | '/Details'
    | '/DiscIcon'
    | '/Frame'
    | '/Input'
    | '/PresetsInput'
    | '/Screen'
    | '/Separator'
    | '/ShowAfter'
    | '/Spacer'
    | '/Spinner'
    | '/ThemeSwitch'
    | '/TokenIcon'
  id:
    | '__root__'
    | '/'
    | '/Balance'
    | '/Button'
    | '/ButtonArea'
    | '/ChainIcon'
    | '/ChainsPath'
    | '/Colors'
    | '/CopyButton'
    | '/Deposit'
    | '/Details'
    | '/DiscIcon'
    | '/Frame'
    | '/Input'
    | '/PresetsInput'
    | '/Screen'
    | '/Separator'
    | '/ShowAfter'
    | '/Spacer'
    | '/Spinner'
    | '/ThemeSwitch'
    | '/TokenIcon'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BalanceRoute: typeof BalanceRoute
  ButtonRoute: typeof ButtonRoute
  ButtonAreaRoute: typeof ButtonAreaRoute
  ChainIconRoute: typeof ChainIconRoute
  ChainsPathRoute: typeof ChainsPathRoute
  ColorsRoute: typeof ColorsRoute
  CopyButtonRoute: typeof CopyButtonRoute
  DepositRoute: typeof DepositRoute
  DetailsRoute: typeof DetailsRoute
  DiscIconRoute: typeof DiscIconRoute
  FrameRoute: typeof FrameRoute
  InputRoute: typeof InputRoute
  PresetsInputRoute: typeof PresetsInputRoute
  ScreenRoute: typeof ScreenRoute
  SeparatorRoute: typeof SeparatorRoute
  ShowAfterRoute: typeof ShowAfterRoute
  SpacerRoute: typeof SpacerRoute
  SpinnerRoute: typeof SpinnerRoute
  ThemeSwitchRoute: typeof ThemeSwitchRoute
  TokenIconRoute: typeof TokenIconRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BalanceRoute: BalanceRoute,
  ButtonRoute: ButtonRoute,
  ButtonAreaRoute: ButtonAreaRoute,
  ChainIconRoute: ChainIconRoute,
  ChainsPathRoute: ChainsPathRoute,
  ColorsRoute: ColorsRoute,
  CopyButtonRoute: CopyButtonRoute,
  DepositRoute: DepositRoute,
  DetailsRoute: DetailsRoute,
  DiscIconRoute: DiscIconRoute,
  FrameRoute: FrameRoute,
  InputRoute: InputRoute,
  PresetsInputRoute: PresetsInputRoute,
  ScreenRoute: ScreenRoute,
  SeparatorRoute: SeparatorRoute,
  ShowAfterRoute: ShowAfterRoute,
  SpacerRoute: SpacerRoute,
  SpinnerRoute: SpinnerRoute,
  ThemeSwitchRoute: ThemeSwitchRoute,
  TokenIconRoute: TokenIconRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Balance",
        "/Button",
        "/ButtonArea",
        "/ChainIcon",
        "/ChainsPath",
        "/Colors",
        "/CopyButton",
        "/Deposit",
        "/Details",
        "/DiscIcon",
        "/Frame",
        "/Input",
        "/PresetsInput",
        "/Screen",
        "/Separator",
        "/ShowAfter",
        "/Spacer",
        "/Spinner",
        "/ThemeSwitch",
        "/TokenIcon"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Balance": {
      "filePath": "Balance.tsx"
    },
    "/Button": {
      "filePath": "Button.tsx"
    },
    "/ButtonArea": {
      "filePath": "ButtonArea.tsx"
    },
    "/ChainIcon": {
      "filePath": "ChainIcon.tsx"
    },
    "/ChainsPath": {
      "filePath": "ChainsPath.tsx"
    },
    "/Colors": {
      "filePath": "Colors.tsx"
    },
    "/CopyButton": {
      "filePath": "CopyButton.tsx"
    },
    "/Deposit": {
      "filePath": "Deposit.tsx"
    },
    "/Details": {
      "filePath": "Details.tsx"
    },
    "/DiscIcon": {
      "filePath": "DiscIcon.tsx"
    },
    "/Frame": {
      "filePath": "Frame.tsx"
    },
    "/Input": {
      "filePath": "Input.tsx"
    },
    "/PresetsInput": {
      "filePath": "PresetsInput.tsx"
    },
    "/Screen": {
      "filePath": "Screen.tsx"
    },
    "/Separator": {
      "filePath": "Separator.tsx"
    },
    "/ShowAfter": {
      "filePath": "ShowAfter.tsx"
    },
    "/Spacer": {
      "filePath": "Spacer.tsx"
    },
    "/Spinner": {
      "filePath": "Spinner.tsx"
    },
    "/ThemeSwitch": {
      "filePath": "ThemeSwitch.tsx"
    },
    "/TokenIcon": {
      "filePath": "TokenIcon.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
